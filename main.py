# -*- coding: utf-8 -*-
"""STA561_Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-zrOWAKWNQCMrOmIvMA8oVrS9m24Wkoq
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LogisticRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_absolute_error, accuracy_score, ndcg_score
from sklearn.svm import LinearSVC, SVC
from sklearn.preprocessing import StandardScaler
import itertools
from xgboost import XGBClassifier
import warnings
warnings.filterwarnings("ignore")

raw_dataset = pd.read_csv('CollegeBasketballPlayers2009-2021.csv', low_memory=False)

new_dataset = raw_dataset.loc[raw_dataset['pick'] >= 1]
trainset = new_dataset.loc[new_dataset['year'] < 2021]
testset = new_dataset.loc[raw_dataset['year'] == 2021]

features_basic = ['treb', 'ast', 'stl', 'blk', 'pts', 'yr']
features_advanced = ['eFG', 'TS_per', 'FT_per', 'twoP_per', 'TP_per', 'ast/tov', 
                     'obpm', 'dbpm', 'oreb', 'dreb', 'TO_per', 'ORB_per', 'DRB_per',
                     'AST_per', 'blk_per', 'stl_per', 'Min_per']
trainset['yr'] = trainset['yr'].rank(method='dense', ascending=True).astype(int)
testset['yr'] = testset['yr'].rank(method='dense', ascending=True).astype(int)
trainset['ast/tov'] = trainset['ast/tov'].fillna(trainset['ast/tov'].value_counts().index[1])
X_train = np.asarray(trainset[features_basic + features_advanced])
X_test = np.asarray(testset[features_basic + features_advanced])
y_train_pick = np.asarray(trainset.pick)
y_train_year = np.asarray(trainset.year)
y_test = np.asarray(testset.pick)

"""#Regression"""

ball_model = RandomForestRegressor()
ball_model.fit(X_train, y_train_pick)

y_pred = ball_model.predict(X_test)
y_pred = y_pred.argsort().argsort()
y_test = y_test.argsort().argsort()
print(y_pred)
print(y_test)
mae = mean_absolute_error(y_pred, y_test)
print("MAE: {:,.5f}".format(mae))

"""# Ranking"""

y_train = np.c_[y_train_pick, y_train_year]

def transform_pairwise(X, y):
    X_new = []
    y_new = []
    y = np.asarray(y)
    if y.ndim == 1:
        y = np.c_[y, np.ones(y.shape[0])]
    perm = itertools.permutations(range(X.shape[0]), 2)
    for k, (i, j) in enumerate(perm):
        if y[i][0] == y[j][0] or y[i][1] != y[j][1]:
            continue
        X_new.append(np.concatenate((X[i], X[j]), axis=None))
        y_new.append(np.sign(y[i][0] - y[j][0]))
    return np.asarray(X_new), np.asarray(y_new).ravel()

def calc_ndcg(y_pred, y_test):
    scores = np.zeros(y_test.shape)
    for i in range(len(scores)):
        scores[i] = np.sum(y_pred[i * y_test.shape[0]: (i + 1) * y_test.shape[0]])
    rank_pred = scores.argsort().argsort()
    return rank_pred, ndcg_score([y_test.argsort().argsort()], [rank_pred])

X_new, y_new = transform_pairwise(X_train, y_train)
X_test_new, y_test_new = transform_pairwise(X_test, y_test)
rank_model = RandomForestClassifier()
rank_model.fit(X_new, y_new)
y_pred = rank_model.predict(X_test_new)
rank_pred, score = calc_ndcg(y_pred, y_test)
print(score)

"""##Neural Network"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset

#Model architecture 
class BinaryClassification(nn.Module):
    def __init__(self):
        super(BinaryClassification, self).__init__()
        # Number of input features is 48.
        self.layer_1 = nn.Linear(46, 128) 
        self.layer_2 = nn.Linear(128, 128)
        self.layer_out = nn.Linear(128, 1) 
        
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(p=0.3)
        
    def forward(self, inputs):
        x = self.relu(self.layer_1(inputs))
        #x = self.dropout(x)
        x = self.relu(self.layer_2(x))
        x = self.dropout(x)
        x = self.layer_out(x)
        return x

#Dataset structure
class TrainData(Dataset):
    def __init__(self, X_data, y_data):
        self.X_data = X_data
        self.y_data = y_data
        
    def __getitem__(self, index):
        return self.X_data[index], self.y_data[index]
        
    def __len__ (self):
        return len(self.X_data)

class ValidationData(Dataset):
    def __init__(self, X_data):
        self.X_data = X_data

    def __getitem__(self, index):
        return self.X_data[index]
        
    def __len__ (self):
        return len(self.X_data)

class TestData(Dataset):
    def __init__(self, X_data):
        self.X_data = X_data
        
    def __getitem__(self, index):
        return self.X_data[index]
        
    def __len__ (self):
        return len(self.X_data)

def calc_train_acc(y_pred, y_test):
    y_pred_tag = torch.round(torch.sigmoid(y_pred))

    correct_results_sum = (y_pred_tag == y_test).sum().float()
    acc = correct_results_sum/y_test.shape[0]
    acc = torch.round(acc * 100)
    
    return acc

def use_neural_network(X_train, y_train, X_test, y_test):
    X_new, y_new = transform_pairwise(X_train, y_train)
    X_test_new, y_test_new = transform_pairwise(X_test, y_test)

    #Split train/validation/test dataset
    X_train_nn, X_test_nn, y_train_nn, y_test_nn = train_test_split(X_new, y_new, train_size=0.2)
    train_data = TrainData(torch.FloatTensor(X_train_nn), 
                           torch.FloatTensor(np.where(y_train_nn == -1, 0, y_train_nn)))
    train_loader = DataLoader(dataset=train_data, batch_size=64, shuffle=True)

    val_data = ValidationData(torch.FloatTensor(X_test_nn))
    val_loader = DataLoader(dataset=val_data, batch_size=1)

    test_data = TestData(torch.FloatTensor(X_test_new))
    test_loader = DataLoader(dataset=test_data, batch_size=1)

    #Define model
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model = BinaryClassification()
    model.to(device)
    criterion = nn.BCEWithLogitsLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.01)

    #Train
    print('Start training ... It may takes around 5 minutes ...')
    model.train()
    best_accuracy = 0
    train_accuracy_list = []
    val_accuracy_list = []
    epochs = 100
    for e in range(epochs):
        epoch_loss = 0
        epoch_acc = 0
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            optimizer.zero_grad()
        
            y_pred = model(X_batch)
            loss = criterion(y_pred, y_batch.unsqueeze(1))
            acc = calc_train_acc(y_pred, y_batch.unsqueeze(1))
            loss.backward()
            optimizer.step()
        
            epoch_loss += loss.item()
            epoch_acc += acc.item()

        #Validation
        if e % 10 == 0:
            y_pred_list = []
            model.eval()
            with torch.no_grad():
                for X_batch in val_loader:
                    X_batch = X_batch.to(device)
                    y_test_pred = model(X_batch)
                    y_test_pred = torch.sigmoid(y_test_pred)
                    y_pred_tag = torch.round(y_test_pred)
                    y_pred_list.append(y_pred_tag.cpu().numpy())

            y_pred_list = np.array([int(a.squeeze().tolist()) for a in y_pred_list])
            val_accuracy = accuracy_score(np.where(y_test_nn == -1, 0, y_test_nn), y_pred_list)
            val_accuracy_list.append(val_accuracy)
            train_accuracy_list.append(epoch_acc/len(train_loader))
            if val_accuracy > best_accuracy:
                best_accuracy = val_accuracy
                torch.save(model.state_dict(), 'rank.pt') # save best model
            print(f"Epoch {e+0:03}: | Loss: {epoch_loss/len(train_loader):.5f} | train acc: {epoch_acc/len(train_loader):.3f} | val acc: {val_accuracy:.3f}")
    
    #Prediction
    print('Finished training. Start prediction ...')
    best_state_dict = torch.load('rank.pt') #load best model
    model.load_state_dict(best_state_dict) 
    y_pred = []
    model.eval()
    with torch.no_grad():
        for X_batch in test_loader:
            X_batch = X_batch.to(device)
            y_test_pred = model(X_batch)
            y_test_pred = torch.sigmoid(y_test_pred)
            y_pred_tag = torch.round(y_test_pred)
            y_pred.append(y_pred_tag.cpu().numpy())

    y_pred = np.array([int(i.squeeze().tolist()) for i in y_pred])
    print('Pairwise accuracy: ', accuracy_score(y_test_new, np.where(y_pred == 0, -1, y_pred)))
    rank, score = calc_ndcg(np.where(y_pred == 0, -1, y_pred), y_test)
    print("NDCG score: ", score)
    return rank

rank_pred = use_neural_network(X_train, y_train, X_test, y_test)

df = pd.DataFrame(data={'Name': testset['player_name'].values,
                        'Rank': np.array([item + 1 for item in rank_pred])})
print(df)
df.to_csv('Rank.csv')